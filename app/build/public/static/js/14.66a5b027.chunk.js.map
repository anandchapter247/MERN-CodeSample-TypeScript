{"version":3,"sources":["app/components/validator/Profile.ts","app/containers/ChangePassword/index.tsx","app/containers/MyProfile/index.tsx"],"names":["profileValidator","data","_email","_email2","validations","email","Object","defineProperty","ValidationTypes","REQUIRED","EMAIL","firstName","lastName","messages","message","InvalidEmail","RequiredEmail","RequiredFirstName","RequiredLastName","_Validator","Validator","isValid","errors","ChangePassword","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidUpdate","prevProps","console","log","changePasswordReducer","isLoading","setState","oldPassword","newPassword","confirmPassword","handleChange","event","_objectSpread3","_event$target","target","name","value","_objectSpread","state","handleSubmit","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","e","_this$state","_passwordValidator","wrap","_context","prev","next","preventDefault","passwordValidator","changePassword","abrupt","stop","_x","apply","arguments","_this$state2","react_default","createElement","Form","onSubmit","Group","Label","className","InputGroup","type","placeholder","onChange","Row","Col","xs","Button","Component","connect","profileInfoReducer","dispatch","changePasswordRequest","MyProfile","componentDidMount","profileInfo","_profileInfoReducer$p","MyProfile_objectSpread","_profileValidator","updateProfile","sm","lg","Card","Header","Body","disabled","containers_ChangePassword","profileupdateRequest"],"mappings":"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","file":"static/js/14.66a5b027.chunk.js","sourcesContent":["import Validator, { ValidationTypes } from 'js-object-validation';\nimport { message } from '../../common/messages';\n\nexport const profileValidator = (data: any) => {\n  const validations = {\n    email: {\n      [ValidationTypes.REQUIRED]: true,\n      [ValidationTypes.EMAIL]: true,\n    },\n    firstName: {\n      [ValidationTypes.REQUIRED]: true,\n    },\n    lastName: {\n      [ValidationTypes.REQUIRED]: true,\n    },\n  };\n  // Error messages\n  const messages = {\n    email: {\n      [ValidationTypes.EMAIL]: message.InvalidEmail,\n      [ValidationTypes.REQUIRED]: message.RequiredEmail,\n    },\n    firstName: {\n      [ValidationTypes.REQUIRED]: message.RequiredFirstName,\n    },\n    lastName: {\n      [ValidationTypes.REQUIRED]: message.RequiredLastName,\n    },\n  };\n\n  const { isValid, errors } = Validator(data, validations, messages);\n  return {\n    isValid,\n    errors,\n  };\n};\n","import React, { Component } from 'react';\nimport { Button, Row, Col, Form, InputGroup } from 'react-bootstrap';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport {\n  IRootState,\n  IChangePasswordState,\n  IChangePasswordProps,\n  IChangePassword,\n} from '../../../interfaces';\nimport { changePasswordRequest } from '../../../actions';\nimport { passwordValidator } from '../../components/validator';\n\nclass ChangePassword extends Component<\n  IChangePasswordProps,\n  IChangePasswordState\n> {\n  constructor(props: IChangePasswordProps) {\n    super(props);\n    this.state = {\n      oldPassword: '',\n      newPassword: '',\n      confirmPassword: '',\n      errors: { oldPassword: '', newPassword: '', confirmPassword: '' },\n    };\n  }\n  componentDidUpdate = (prevProps: IChangePasswordProps) => {\n    console.log(prevProps, '*************');\n    console.log(this.props, '//////////////////');\n    if (\n      prevProps &&\n      prevProps.changePasswordReducer &&\n      this.props &&\n      this.props.changePasswordReducer &&\n      !this.props.changePasswordReducer.isLoading &&\n      prevProps.changePasswordReducer.isLoading !==\n        this.props.changePasswordReducer.isLoading\n    ) {\n      this.setState({\n        oldPassword: '',\n        newPassword: '',\n        confirmPassword: '',\n      });\n    }\n  };\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    this.setState({\n      ...this.state,\n      [name]: value,\n      errors: {\n        ...this.state.errors,\n        [name]: '',\n      },\n    });\n  };\n  handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const { oldPassword, newPassword, confirmPassword } = this.state;\n    const data = {\n      oldPassword,\n      newPassword,\n      confirmPassword,\n    };\n    // To validate form fields\n    const { isValid, errors } = passwordValidator(data);\n    if (isValid) {\n      await this.props.changePassword(data);\n    } else {\n      this.setState({\n        errors,\n      });\n      return;\n    }\n  };\n  render() {\n    const { oldPassword, newPassword, confirmPassword, errors } = this.state;\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <Form.Group>\n          <Form.Label>\n            Old Password<span className={'mandatory'}>*</span>&nbsp;\n          </Form.Label>\n          <InputGroup>\n            <input\n              type={'password'}\n              name={'oldPassword'}\n              value={oldPassword}\n              className={'form-control'}\n              placeholder={'Enter Old Password'}\n              onChange={this.handleChange}\n            />\n          </InputGroup>\n          <div className={'text-danger'}>{errors && errors.oldPassword}</div>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>\n            New Password<span className={'mandatory'}>*</span>&nbsp;\n          </Form.Label>\n          <InputGroup>\n            <input\n              type={'password'}\n              name={'newPassword'}\n              value={newPassword}\n              className={'form-control'}\n              placeholder={'Enter New Password'}\n              onChange={this.handleChange}\n            />\n          </InputGroup>\n          <div className={'text-danger'}>{errors && errors.newPassword}</div>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>\n            Confirm Password<span className={'mandatory'}>*</span>&nbsp;\n          </Form.Label>\n          <InputGroup>\n            <input\n              type={'password'}\n              name={'confirmPassword'}\n              value={confirmPassword}\n              className={'form-control'}\n              placeholder={'Enter Confirm Password'}\n              onChange={this.handleChange}\n            />\n          </InputGroup>\n          <div className={'text-danger'}>\n            {errors && errors.confirmPassword}\n          </div>\n        </Form.Group>\n        <Row>\n          <Col xs='6'>\n            <Button type={'submit'} className='px-4 btn-submit'>\n              Update Password\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps: any = (state: IRootState) => ({\n  profileInfoReducer: state.profileInfoReducer,\n  changePasswordReducer: state.changePasswordReducer,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    changePassword: (data: IChangePassword) => {\n      dispatch(changePasswordRequest(data));\n    },\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ChangePassword);\n","import React, { Component } from 'react';\nimport { Button, Card, Row, Col, Form, InputGroup } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport {\n  IRootState,\n  IProfileState,\n  IProfileProps,\n  IProfileInfo,\n} from '../../../interfaces';\nimport { profileupdateRequest } from '../../../actions';\nimport { Dispatch } from 'redux';\nimport { profileValidator } from '../../components/validator/Profile';\nimport ChangePassword from '../ChangePassword';\n\nclass MyProfile extends Component<IProfileProps, IProfileState> {\n  constructor(props: IProfileProps) {\n    super(props);\n    this.state = {\n      email: '',\n      firstName: '',\n      lastName: '',\n      errors: {\n        email: '',\n        firstName: '',\n        lastName: '',\n      },\n    };\n  }\n  componentDidMount = () => {\n    const { profileInfoReducer } = this.props;\n    if (profileInfoReducer) {\n      const { profileInfo } = profileInfoReducer;\n      console.log('///////////////////////');\n      const { email, firstName, lastName } = profileInfo;\n      this.setState({\n        email,\n        firstName,\n        lastName,\n      });\n    }\n  };\n  componentDidUpdate = (prevProps: IProfileProps) => {\n    const { profileInfoReducer } = this.props;\n    if (\n      profileInfoReducer &&\n      profileInfoReducer.profileInfo &&\n      prevProps &&\n      prevProps.profileInfoReducer &&\n      prevProps.profileInfoReducer.profileInfo !==\n        profileInfoReducer.profileInfo\n    ) {\n      const { email, firstName, lastName } = profileInfoReducer.profileInfo;\n      console.log('///////////////////////');\n      this.setState({\n        email,\n        firstName,\n        lastName,\n      });\n    }\n  };\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    this.setState({\n      ...this.state,\n      [name]: value,\n    });\n  };\n  handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const { email, firstName, lastName } = this.state;\n    const data = {\n      email,\n      firstName,\n      lastName,\n    };\n    // To validate form fields\n    const { isValid, errors } = profileValidator(data);\n    if (isValid) {\n      this.props.updateProfile(data);\n    } else {\n      this.setState({\n        errors,\n      });\n      return;\n    }\n  };\n  render() {\n    console.log(this.props.profileInfoReducer);\n    console.log('this.props.profileInfoReducer*****************');\n    const { firstName, lastName, email, errors } = this.state;\n    console.log(firstName, '*********');\n    return (\n      <div className='cr-page px-3 min-height650 my-profile-section'>\n        <Row>\n          <Col xs='6' sm='6' lg='6'>\n            <Card>\n              <Card.Header>\n                <h4>\n                  <i className='fa fa-edit' />\n                  &nbsp;My Profile\n                </h4>\n              </Card.Header>\n              <Card.Body>\n                <Form onSubmit={this.handleSubmit}>\n                  <Form.Group>\n                    <Form.Label>\n                      First Name<span className={'mandatory'}>*</span>&nbsp;\n                    </Form.Label>\n                    <InputGroup>\n                      <input\n                        type={'text'}\n                        name={'firstName'}\n                        value={firstName}\n                        className={'form-control'}\n                        placeholder={'Enter First Name'}\n                        onChange={this.handleChange}\n                      />\n                    </InputGroup>\n                    <div className={'text-danger'}>\n                      {errors && errors.firstName}\n                    </div>\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label>\n                      Last Name<span className={'mandatory'}>*</span>&nbsp;\n                    </Form.Label>\n                    <InputGroup>\n                      <input\n                        type={'text'}\n                        name={'lastName'}\n                        value={lastName}\n                        className={'form-control'}\n                        placeholder={'Enter Last Name'}\n                        onChange={this.handleChange}\n                      />\n                    </InputGroup>\n                    <div className={'text-danger'}>\n                      {errors && errors.lastName}\n                    </div>\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label>\n                      Email<span className={'mandatory'}>*</span>&nbsp;\n                    </Form.Label>\n                    <InputGroup>\n                      <input\n                        type={'text'}\n                        name={'email'}\n                        value={email}\n                        className={'form-control'}\n                        placeholder={'Enter Email'}\n                        onChange={this.handleChange}\n                        disabled={true}\n                      />\n                    </InputGroup>\n                    <div className={'text-danger'}>\n                      {errors && errors.email}\n                    </div>\n                  </Form.Group>\n                  <Row>\n                    <Col xs='6'>\n                      <Button type={'submit'} className='px-4 btn-submit'>\n                        Update\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </Card.Body>\n            </Card>\n          </Col>\n          <Col xs='6' sm='6' lg='6'>\n            <Card>\n              <Card.Header>\n                <h4>\n                  <i className='fa fa-edit' />\n                  &nbsp;Change Password\n                </h4>\n              </Card.Header>\n              <Card.Body>\n                <ChangePassword {...this.props} />\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: any = (state: IRootState) => ({\n  profileInfoReducer: state.profileInfoReducer,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    updateProfile: (data: IProfileInfo) => {\n      dispatch(profileupdateRequest(data));\n    },\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(MyProfile);\n"],"sourceRoot":""}