{"version":3,"sources":["app/common/messages.ts","app/components/validator/Login.ts","app/components/validator/ChangePassword.ts","app/components/validator/CMS.ts","app/components/validator/index.ts","../node_modules/react-bootstrap/esm/CardGroup.js","app/containers/Auth/index.tsx"],"names":["__webpack_require__","d","__webpack_exports__","message","InvalidEmail","InvalidName","RequiredEmail","RequiredFirstName","RequiredLastName","RequiredCompany","RequiredPasscode","RequiredPassword","RequiredOldPassword","RequiredRePassword","InvalidPasswordLength","InvalidRePasswordLength","MinLengthPassword","PasswordMatchError","InvalidNameLength","RequiredConatctName","RequiredOfficeNumber","RequiredContactNumber","RequiredMobile","RequiredPhone","RequiredEmailBody","RequiredEmailSubject","MobileInvalid","PhoneInvalid","OfficeNoInvalid","RequiredCountry","RequiredAddress","RequiredCity","RequiredState","RequiredPostalCode","RequiredTimeZone","RequiredCard","RequiredCvv","RequiredExpireDate","Title","buttonText","content","image","VideoURL","loginValidator","data","_email","_email2","validations","email","Object","defineProperty","ValidationTypes","REQUIRED","EMAIL","password","messages","_Validator","Validator","isValid","errors","passwordValidator","_newPassword","_confirmPassword","_newPassword2","_confirmPassword2","oldPassword","newPassword","MINLENGTH","confirmPassword","EQUAL","HomePageValidator","mainSectionTitle","mainSectionContent","mainSectionButtonText","mainSectionImageUrl","ourStoryContent","ourStoryTitle","ourStoryVideoLink","Login_loginValidator","ChangePassword_passwordValidator","CMS_HomePageValidator","CardGroup","createWithBsPrefix","Login","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toastId","handleChange","event","_objectSpread3","_event$target","target","name","value","setState","_objectSpread","state","handleSubmit","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","e","_this$state","_loginValidator","wrap","_context","prev","next","preventDefault","trim","toLowerCase","onLogin","abrupt","stop","_x","apply","arguments","console","log","localStorage","getItem","redirectTo","path","_this$state2","react_default","createElement","className","Container","Row","Col","md","Card","Body","Form","onSubmit","Group","InputGroup","Prepend","Text","id","type","placeholder","onChange","xs","Button","color","Component","connect","loginReducer","dispatch","LoginRequest"],"mappings":"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","file":"static/js/10.f5db5d37.chunk.js","sourcesContent":["export const message = {\n  InvalidEmail: 'Please enter valid email address',\n  InvalidName: 'Name should contain only characters.',\n  RequiredEmail: 'Email address is required.',\n  RequiredFirstName: 'First Name is required.',\n  RequiredLastName: 'Last Name is required.',\n  RequiredCompany: 'Company name is required.',\n  RequiredPasscode: 'Passcode is required.',\n  RequiredPassword: 'Password is required.',\n  RequiredOldPassword: 'Old password is required',\n  RequiredRePassword: 'Confirm password is required.',\n  InvalidPasswordLength: 'Password should atleast 8 characters long.',\n  InvalidRePasswordLength: 'Confirm password should atleast 8 characters long.',\n  MinLengthPassword: 'Password should be at least 6 characters long.',\n  PasswordMatchError: \"Password and confirm password didn't match.\",\n  InvalidNameLength: 'Name fieid should contain atleast 2 letters',\n  RequiredConatctName: 'Contact name is required',\n  RequiredOfficeNumber: 'Office number is required',\n  RequiredContactNumber: 'Contact number is required',\n  RequiredMobile: 'Mobile number is required',\n  RequiredPhone: 'Phone number is required',\n  RequiredEmailBody: 'Please enter some text in email body',\n  RequiredEmailSubject: 'Please enter subject of the email',\n  MobileInvalid: 'Mobile number should contain atleast 10 digit',\n  PhoneInvalid: 'Phone number should contain atleast 10 digit',\n  OfficeNoInvalid: 'Office number should contain atleast 10 digit',\n  RequiredCountry: 'Please select country',\n  RequiredAddress: 'Address is required',\n  RequiredCity: 'City is required',\n  RequiredState: 'State is required',\n  RequiredPostalCode: 'Zip code is required',\n  RequiredTimeZone: 'Tiimezone is required',\n  RequiredCard: 'Please enter valid card number',\n  RequiredCvv: 'Please enter valid CVV',\n  RequiredExpireDate: 'Please enter valid expiration date',\n\n    //Home Page Section\n    Title: \"Please enter title\",\n    buttonText: \"Please enter button text\",\n    content: \"Please enter description\",\n    image: \"Please enter image\",\n    VideoURL: \"Please enter video url\"\n};\n","import Validator, { ValidationTypes } from 'js-object-validation';\nimport { message } from '../../common/messages';\n\nexport const loginValidator = (data: any) => {\n  const validations = {\n    email: {\n      [ValidationTypes.REQUIRED]: true,\n      [ValidationTypes.EMAIL]: true,\n    },\n    password: {\n      [ValidationTypes.REQUIRED]: true,\n    },\n  };\n  // Error messages\n  const messages = {\n    email: {\n      [ValidationTypes.EMAIL]: message.InvalidEmail,\n      [ValidationTypes.REQUIRED]: message.RequiredEmail,\n    },\n    password: {\n      [ValidationTypes.REQUIRED]: message.RequiredPassword,\n    },\n  };\n\n  const { isValid, errors } = Validator(data, validations, messages);\n  return {\n    isValid,\n    errors,\n  };\n};\n","import Validator, { ValidationTypes } from 'js-object-validation';\nimport { message } from '../../common/messages';\n\nexport const passwordValidator = (data: any) => {\n  const validations = {\n    oldPassword: {\n      [ValidationTypes.REQUIRED]: true,\n    },\n    newPassword: {\n      [ValidationTypes.REQUIRED]: true,\n      [ValidationTypes.MINLENGTH]: 6,\n    },\n    confirmPassword: {\n      [ValidationTypes.REQUIRED]: true,\n      [ValidationTypes.EQUAL]: 'newPassword',\n    },\n  };\n  // Error messages\n  const messages = {\n    oldPassword: {\n      [ValidationTypes.REQUIRED]: message.RequiredOldPassword,\n    },\n    newPassword: {\n      [ValidationTypes.REQUIRED]: message.RequiredPassword,\n      [ValidationTypes.MINLENGTH]: message.MinLengthPassword,\n    },\n    confirmPassword: {\n      [ValidationTypes.REQUIRED]: message.RequiredRePassword,\n      [ValidationTypes.EQUAL]: message.PasswordMatchError,\n    },\n  };\n\n  const { isValid, errors } = Validator(data, validations, messages);\n  return {\n    isValid,\n    errors,\n  };\n};\n","import Validator, { ValidationTypes } from 'js-object-validation';\nimport { message } from '../../common/messages';\n\nexport const HomePageValidator = (data: any) => {\n  const validations = {\n    mainSectionTitle: {\n      [ValidationTypes.REQUIRED]: true,\n    },\n    mainSectionContent: {\n      [ValidationTypes.REQUIRED]: true,\n    },\n    mainSectionButtonText: {\n      [ValidationTypes.REQUIRED]: true,\n    },\n    mainSectionImageUrl: {\n      [ValidationTypes.REQUIRED]: true,\n    },\n    ourStoryContent: {\n      [ValidationTypes.REQUIRED]: true,\n    },\n    ourStoryTitle: {\n      [ValidationTypes.REQUIRED]: true,\n    },\n    ourStoryVideoLink: {\n      [ValidationTypes.REQUIRED]: true,\n    }\n  };\n\n  const messages = {\n    mainSectionTitle: {\n      [ValidationTypes.REQUIRED]: message.Title,\n    },\n    mainSectionContent: {\n      [ValidationTypes.REQUIRED]: message.content,\n    },\n    mainSectionButtonText: {\n      [ValidationTypes.REQUIRED]: message.buttonText,\n    },\n    mainSectionImageUrl: {\n      [ValidationTypes.REQUIRED]: message.image,\n    },\n    ourStoryContent: {\n      [ValidationTypes.REQUIRED]: message.content\n    },\n    ourStoryTitle: {\n      [ValidationTypes.REQUIRED]: message.Title,\n    },\n    ourStoryVideoLink: {\n      [ValidationTypes.REQUIRED]: message.VideoURL,\n    }\n  };\n  const { isValid, errors } = Validator(data, validations, messages);\n\n  return {\n    isValid,\n    errors,\n  };\n};\n","export * from './Login';\nexport * from './ChangePassword';\nexport * from './CMS';\n","import createWithBsPrefix from './utils/createWithBsPrefix';\nexport default createWithBsPrefix('card-group');","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport {\n  Button,\n  Card,\n  CardGroup,\n  Row,\n  Col,\n  Container,\n  Form,\n  InputGroup,\n} from 'react-bootstrap';\nimport {\n  ILoginState,\n  ILoginProps,\n  IRootState,\n  ILoginActionData,\n} from '../../../interfaces';\nimport { loginValidator } from '../../components/validator';\nimport { LoginRequest } from '../../../actions';\n\nclass Login extends Component<ILoginProps, ILoginState> {\n  toastId: any = null;\n  constructor(props: ILoginProps) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      errors: {\n        email: '',\n        password: '',\n      },\n    };\n  }\n  componentDidMount() {\n    console.log('did mount');\n    console.log(this.props);\n    if (localStorage.getItem('token') && this.props.redirectTo) {\n      console.log('ffffffffffffffffffff');\n      this.props.redirectTo({ path: '/dashboard' });\n    }\n  }\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    this.setState({\n      ...this.state,\n      [name]: value,\n      errors: {\n        ...this.state.errors,\n        [name]: '',\n      },\n    });\n  };\n\n  handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const { email, password } = this.state;\n    const data = {\n      email: email ? email.trim().toLowerCase() : '',\n      password,\n    };\n    // To validate form fields\n    const { isValid, errors } = loginValidator(data);\n    if (isValid) {\n      await this.props.onLogin(data);\n    } else {\n      this.setState({\n        errors,\n      });\n      return;\n    }\n  };\n\n  render() {\n    const { email, password, errors } = this.state;\n    return (\n      <div className='app flex-row align-items-center'>\n        <Container>\n          <Row className='justify-content-center'>\n            <Col md='5'>\n              <CardGroup>\n                <Card className='p-4'>\n                  <Card.Body>\n                    <Form onSubmit={this.handleSubmit}>\n                      <h1>Login</h1>\n                      <p className='text-muted'>Sign In to your account</p>\n                      <Form.Group>\n                        <InputGroup>\n                          <InputGroup.Prepend>\n                            <InputGroup.Text id='inputGroupPrepend'>\n                              <i className='icon-user' />\n                            </InputGroup.Text>\n                          </InputGroup.Prepend>\n                          <input\n                            type={'text'}\n                            name={'email'}\n                            value={email}\n                            className={'form-control'}\n                            placeholder={'Enter email'}\n                            onChange={this.handleChange}\n                          />\n                        </InputGroup>\n                        <div className={'text-danger'}>\n                          {errors && errors.email}\n                        </div>\n                      </Form.Group>\n                      <Form.Group>\n                        <InputGroup>\n                          <InputGroup.Prepend>\n                            <InputGroup.Text id='inputGroupPrepend'>\n                              <i className='icon-lock' />\n                            </InputGroup.Text>\n                          </InputGroup.Prepend>\n                          <input\n                            type={'password'}\n                            name={'password'}\n                            value={password}\n                            className={'form-control'}\n                            placeholder={'Enter Password'}\n                            onChange={this.handleChange}\n                          />\n                        </InputGroup>\n                        <div className={'text-danger'}>\n                          {errors && errors.password}\n                        </div>\n                      </Form.Group>\n                      <Row>\n                        <Col xs='6'>\n                          <Button\n                            type={'submit'}\n                            color='primary'\n                            className='px-4'\n                          >\n                            Login\n                          </Button>\n                        </Col>\n                        {/* <Col xs=\"6\" className=\"text-right\">\n                          <Button color=\"link\" className=\"px-0\">\n                            Forgot password?\n                          </Button>\n                        </Col> */}\n                      </Row>\n                    </Form>\n                  </Card.Body>\n                </Card>\n              </CardGroup>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: any = (state: IRootState) => ({\n  loginReducer: state.loginReducer,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    onLogin: (data: ILoginActionData) => {\n      dispatch(LoginRequest(data));\n    },\n  };\n};\n/**\n *\n */\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Login);\n"],"sourceRoot":""}